#!/bin/bash

THIS_SCRIPT_VERSION="RC 1.0"

arg_count=$#
(( arg_count > 0 )) && input="${*:$#}"
(( arg_count > 1 )) && gcc_arg="${*%${!#}}"

CRUN_DIR=~/.crun

CACHE_DIR=${CRUN_DIR}/cache

VERSION_FILE="${CRUN_DIR}/version"
HEADER_FILE="${CRUN_DIR}/main.h"
MAIN_FILE="${CRUN_DIR}/main.c"
MAIN_OBJ_FILE="${CRUN_DIR}/main.o"

function _generate_header() {
echo "
/***************
* We use all the posix flags https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html
*/
#include <aio.h>
#include <libgen.h>
#include <spawn.h>
#include <sys/time.h>
#include <arpa/inet.h>
#include <limits.h>
#include <stdarg.h>
#include <sys/times.h>
#include <assert.h>
#include <locale.h>
#include <stdbool.h>
#include <sys/types.h>
#include <complex.h>
#include <math.h>
#include <stddef.h>
#include <sys/uio.h>
#include <cpio.h>
#include <monetary.h>
#include <stdint.h>
#include <sys/un.h>
#include <ctype.h>
#include <mqueue.h>
#include <stdio.h>
#include <sys/utsname.h>
#include <dirent.h>
#include <ndbm.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <dlfcn.h>
#include <net/if.h>
#include <string.h>
#include <syslog.h>
#include <errno.h>
#include <netdb.h>
#include <strings.h>
#include <tar.h>
#include <fcntl.h>
#include <netinet/in.h>
// #include <stropts.h>
#include <termios.h>
#include <fenv.h>
#include <netinet/tcp.h>
#include <sys/ipc.h>
#include <tgmath.h>
#include <float.h>
#include <nl_types.h>
#include <sys/mman.h>
#include <time.h>
#include <fmtmsg.h>
#include <poll.h>
#include <sys/msg.h>
// #include <trace.h>
#include <fnmatch.h>
#include <pthread.h>
#include <sys/resource.h>
#include <ulimit.h>
#include <ftw.h>
#include <pwd.h>
#include <sys/select.h>
#include <unistd.h>
#include <glob.h>
#include <regex.h>
#include <sys/sem.h>
#include <utime.h>
#include <grp.h>
#include <sched.h>
#include <sys/shm.h>
#include <utmpx.h>
#include <iconv.h>
#include <search.h>
#include <sys/socket.h>
#include <wchar.h>
#include <inttypes.h>
#include <semaphore.h>
#include <sys/stat.h>
#include <wctype.h>
#include <iso646.h>
#include <setjmp.h>
#include <sys/statvfs.h>
#include <wordexp.h>
#include <langinfo.h>
#include <signal.h>

extern int errno;
int crun(void);

" > ${HEADER_FILE}
}

function _generate_main() {
echo "
#include \"${HEADER_FILE}\"

int main(void)
{
	errno = 0;
	return crun();
}
" > ${MAIN_FILE}
}

function _compile_main_o() {
	gcc -c "${MAIN_FILE}" -o "${MAIN_OBJ_FILE}"
}

function _get_version() {
	[ -f "${VERSION_FILE}" ] && source "${VERSION_FILE}"
}

function _update_version() {
	echo "EXECUTABLE_VERSION=${THIS_SCRIPT_VERSION}" > ${VERSION_FILE}
}

function _clean_cache() {
	[ -d ${CACHE_DIR} ] && rm -Rf ${CACHE_DIR}
	mkdir -p ${CACHE_DIR}
	echo "clearing cache"
}

function _clean_all() {
	[ -d ${CRUN_DIR} ] && rm -Rf ${CRUN_DIR}
	mkdir -p ${CRUN_DIR} && mkdir -p ${CACHE_DIR}
	echo "regenerating source files and clearing cache"
}

function _source_has_changed() {
	if 	[ "_${DEBUG_CRUN}" != "_" ] ||
		[ ! -d ${CRUN_DIR} ] ||
		[ ! -d ${CACHE_DIR} ] ||
		[ "_${EXECUTABLE_VERSION}" != "_${THIS_SCRIPT_VERSION}" ] || 
		[ ! -f "${MAIN_OBJ_FILE}" ] ||
		[ ! -f "${MAIN_FILE}" ] ||
		[ ! -f "${HEADER_FILE}" ];
	then
		return 0
	else
		return 1
	fi
}

fn_declare="int crun(void){{"
fn_tail=";} return errno;}"
FILE_TXT=""

function _generate_C_from_file() {
	LINE_SKIP="1"
	if [ "_$(head --lines=1 ${input} | grep '#!')" != "_" ];
	then	
		LINE_SKIP=$(( ${LINE_SKIP} + 1 ))
	fi

	FILE_TXT="${fn_declare}
	$(tail --lines=+${LINE_SKIP} ${input})
	${fn_tail}"
}

function _generate_C_from_args() {
	FILE_TXT="${fn_declare} ${input} ${fn_tail}"
}

function _generate_C_from_stdin() {
	FILE_TXT="${fn_declare}"
	while read input_text; do
		FILE_TXT="${FILE_TXT} ${input_text}"
	done
	FILE_TXT="${FILE_TXT} ${fn_tail}"
}

function _hash_C_file() {
	echo "${FILE_TXT}" | cksum | cut -d ' ' -f 1
}

_get_version

if _source_has_changed 
then
	_clean_all &&
	_generate_header &&
	_generate_main &&
	_compile_main_o &&
	_update_version
fi

INPUT_FILENAME=""
if [ "_${input}" == "_" ] || [ "${input}" == "$0" ] || [ "${input}" == "-" ];
then
	_generate_C_from_stdin
elif [ ! -f "${input}" ];
then
	_generate_C_from_args
else
	_generate_C_from_file
	INPUT_FILENAME="$(basename ${input})"
fi

cd ${CACHE_DIR}

HASHED_C_FILE="$(_hash_C_file)"
if [ ! -f "${HASHED_C_FILE}" ];
then
	if [ "_${INPUT_FILENAME}" != "_" ];
	then
		echo "${FILE_TXT}" > ${INPUT_FILENAME}
		gcc ${gcc_arg} -x c -c -include ${HEADER_FILE} -o ${HASHED_C_FILE}.o ${INPUT_FILENAME}
		rm ${INPUT_FILENAME}
	else
		echo "${FILE_TXT}" | gcc ${gcc_arg} -x c -c -include ${HEADER_FILE} -o "${HASHED_C_FILE}.o" -
	fi

	if [ -f "${HASHED_C_FILE}.o" ]; 
	then
		gcc -o ${HASHED_C_FILE} ${HASHED_C_FILE}.o ${MAIN_OBJ_FILE} &&
		rm ${HASHED_C_FILE}.o
	fi
fi

if [ -f "${HASHED_C_FILE}" ];
then
	./${HASHED_C_FILE}
	exit $!
else
	exit 1
fi
