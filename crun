#!/bin/bash
CRUN_VERSION="RC 1.0"

HELP=""

#defaults
CRUN_DIR=~/.crun

CACHE_DIR=${CRUN_DIR}/cache

VERSION_FILE="${CRUN_DIR}/version"
HEADER_FILE="${CRUN_DIR}/main.h"
MAIN_FILE="${CRUN_DIR}/main.c"
MAIN_OBJ_FILE="${CRUN_DIR}/main.o"

CLEAN_CACHE="false"
CLEAN_ALL="false"
VERBOSE="false"
CRUN_EDITOR="vi"

input=""
gcc_arg=""

PARSE_ARG="true"
while true; do
	if [ "${PARSE_ARG}" == "true" ];
	then
		case $1 in
			--debug)
				VERBOSE="true"
				CLEAN_ALL="true"
				shift
				;;
			--verbose)
				VERBOSE="true"
				shift
				;;
			--clean_cache)
				CLEAN_CACHE="true"
				shift
				;;
			--clean_all)
				CLEAN_ALL="true"
				shift
				;;
			--install)
				echo "installing crun @ /bin/crun"
				sudo /bin/bash -c "rm /bin/crun &> /dev/null; cp $0 /bin/crun"
				shift
				exit $?
				;;
			*)
				PARSE_ARG="false"
				;;
		esac
	else
		if [ "_$1" == "_" ];
		then
			break;
		else
			gcc_arg="${gcc_arg} ${input}"
			input="$1"
			shift
		fi
	fi



done

if [ "_${VERBOSE}" == "_true" ];
then
	set -x
fi

function _set_editor() {
	CRUN_EDITOR=$(git var GIT_EDITOR)
	[ "_${CRUN_EDITOR}" == "_" ] && CRUN_EDITOR="${VISUAL}"
	[ "_${CRUN_EDITOR}" == "_" ] && CRUN_EDITOR="${EDITOR}"
	[ "_${CRUN_EDITOR}" == "_" ] && command -v vim &> /dev/null && CRUN_EDITOR="vim"
	[ "_${CRUN_EDITOR}" == "_" ] && command -v nano &> /dev/null && CRUN_EDITOR="nano"
	[ "_${CRUN_EDITOR}" == "_" ] && command -v vi &> /dev/null && CRUN_EDITOR="vi"
}

# # first arguments are for the script
# arg_count=$#
# (( arg_count > 0 )) && input="${*:$#}"
# (( arg_count > 1 )) && gcc_arg="${*%${!#}}"

function _generate_header() {
echo "
/***************
* We use all the posix flags https://pubs.opengroup.org/onlinepubs/9699919799/idx/head.html
*/
#include <aio.h>
#include <libgen.h>
#include <spawn.h>
#include <sys/time.h>
#include <arpa/inet.h>
#include <limits.h>
#include <stdarg.h>
#include <sys/times.h>
#include <assert.h>
#include <locale.h>
#include <stdbool.h>
#include <sys/types.h>
#include <complex.h>
#include <math.h>
#include <stddef.h>
#include <sys/uio.h>
#include <cpio.h>
#include <monetary.h>
#include <stdint.h>
#include <sys/un.h>
#include <ctype.h>
#include <mqueue.h>
#include <stdio.h>
#include <sys/utsname.h>
#include <dirent.h>
#include <ndbm.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <dlfcn.h>
#include <net/if.h>
#include <string.h>
#include <syslog.h>
#include <errno.h>
#include <netdb.h>
#include <strings.h>
#include <tar.h>
#include <fcntl.h>
#include <netinet/in.h>
// #include <stropts.h>
#include <termios.h>
#include <fenv.h>
#include <netinet/tcp.h>
#include <sys/ipc.h>
#include <tgmath.h>
#include <float.h>
#include <nl_types.h>
#include <sys/mman.h>
#include <time.h>
#include <fmtmsg.h>
#include <poll.h>
#include <sys/msg.h>
// #include <trace.h>
#include <fnmatch.h>
#include <pthread.h>
#include <sys/resource.h>
#include <ulimit.h>
#include <ftw.h>
#include <pwd.h>
#include <sys/select.h>
#include <unistd.h>
#include <glob.h>
#include <regex.h>
#include <sys/sem.h>
#include <utime.h>
#include <grp.h>
#include <sched.h>
#include <sys/shm.h>
#include <utmpx.h>
#include <iconv.h>
#include <search.h>
#include <sys/socket.h>
#include <wchar.h>
#include <inttypes.h>
#include <semaphore.h>
#include <sys/stat.h>
#include <wctype.h>
#include <iso646.h>
#include <setjmp.h>
#include <sys/statvfs.h>
#include <wordexp.h>
#include <langinfo.h>
#include <signal.h>

extern int errno;
int crun(void);

" > ${HEADER_FILE}

}

function _generate_main() {

echo "
#include \"${HEADER_FILE}\"

int main(void)
{
	errno = 0;
	return crun();
}
" > ${MAIN_FILE}

}

function _compile_main_o() {
	gcc -c "${MAIN_FILE}" -o "${MAIN_OBJ_FILE}"
}

function _update_version() {
	echo "${CRUN_VERSION}" > ${VERSION_FILE}
}

function _clean_cache() {
	[ -d ${CACHE_DIR} ] && rm -Rf ${CACHE_DIR}
	mkdir -p ${CACHE_DIR}
	echo "clearing cache"
	CLEAN_ALL="false"
}

function _clean_all() {
	[ -d ${CRUN_DIR} ] && rm -Rf ${CRUN_DIR}
	mkdir -p ${CRUN_DIR} && mkdir -p ${CACHE_DIR}
	echo "regenerating source files and clearing cache"
	CLEAN_CACHE="false"
}

function _source_has_changed() {
	if 	[ "_${CLEAN_ALL}" == "_true" ] ||
		[ ! -d ${CRUN_DIR} ] ||
		[ ! -d ${CACHE_DIR} ] ||
		[ ! -f "${VERSION_FILE}" ]
		[ ! -f "${MAIN_OBJ_FILE}" ] ||
		[ ! -f "${MAIN_FILE}" ] ||
		[ ! -f "${HEADER_FILE}" ] ||
		[ "_${CRUN_VERSION}" != "_$(cat ${VERSION_FILE})" ]
	then
		echo "true"
	else
		echo "false"
	fi
}

CRUN_USER_INPUT="${CACHE_DIR}/stdin"
function _generate_C_from_file() {
	CRUN_USER_INPUT="${CACHE_DIR}/$(basename ${input})"

	LINE_SKIP="1"
	if [ "_$(head --lines=1 ${input} | grep '#!')" != "_" ];
	then	
		LINE_SKIP=$(( ${LINE_SKIP} + 1 ))
	fi

	echo "int crun(void){{
	$(tail --lines=+${LINE_SKIP} ${input})
	;} return errno;}" > "${CRUN_USER_INPUT}"
}

function _generate_C_from_args() {
	echo "int crun(void){
		{${input};} 
		return errno;}" > "${CRUN_USER_INPUT}"
}

function _generate_C_from_stdin() {

	if [ ! -t 0 ];
	then
		echo "int crun(void){{" > "${CRUN_USER_INPUT}"

		while read -r input_text; do
			echo "${input_text}" >> "${CRUN_USER_INPUT}"
		done
		echo ";} return errno;}" >> "${CRUN_USER_INPUT}"
	else
		printf "int crun(void)\n{\n\t\n\t\n\treturn errno;\n}\n" > "${CRUN_USER_INPUT}"
		_set_editor
		${CRUN_EDITOR} "${CRUN_USER_INPUT}"
	fi
}

function _hash_C_file() {
	echo "${FILE_TXT}" | cksum "${CRUN_USER_INPUT}" | cut -d ' ' -f 1
}

if  [ "$(_source_has_changed)" == "true" ]
then
	_clean_all &&
	_generate_header &&
	_generate_main &&
	_compile_main_o &&
	_update_version
fi

if  [ "${CLEAN_CACHE}" == "true" ]
then
	_clean_cache
fi


case _${input} in
	_|_-|_/dev/stdin|_stdin)
		_generate_C_from_stdin
		;;
	*)
		if [ -f "${input}" ];
		then
			_generate_C_from_file
		else
			_generate_C_from_args
		fi
	;;
esac

RUNDIR=$(dirname "${CRUN_USER_INPUT}")
CRUN_USER_INPUT=$(basename "${CRUN_USER_INPUT}")
cd "${RUNDIR}" || ( echo "Unexepected error, ${RUNDIR} could not be created" && exit 1 )

HASHED_C_FILE="$(_hash_C_file)"
if [ ! -f "${HASHED_C_FILE}" ];
then
	if [ -f "${CRUN_USER_INPUT}" ];
	then
		gcc ${gcc_arg} -x c -c -include "${HEADER_FILE}" -o "${HASHED_C_FILE}.o" "${CRUN_USER_INPUT}"
		rm "${CRUN_USER_INPUT}"
	fi

	if [ -f "${HASHED_C_FILE}.o" ]; 
	then
		gcc -o "${HASHED_C_FILE}" ${MAIN_OBJ_FILE} "${HASHED_C_FILE}.o" &&
		rm "${HASHED_C_FILE}.o"
	fi
fi

if [ -f "${HASHED_C_FILE}" ];
then
	"./${HASHED_C_FILE}"
	exit $?
else
	exit 1
fi
